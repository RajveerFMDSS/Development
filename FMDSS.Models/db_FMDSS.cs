// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace FMDSS.Models
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class db_FMDSS : System.Data.Entity.DbContext, Idb_FMDSS
    {
        public System.Data.Entity.DbSet<AspNetRole> AspNetRoles { get; set; } // AspNetRoles
        public System.Data.Entity.DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public System.Data.Entity.DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public System.Data.Entity.DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public System.Data.Entity.DbSet<Citizen_TblAssignGuideAndVehicleForDateOfVisite> Citizen_TblAssignGuideAndVehicleForDateOfVisites { get; set; } // tbl_AssignGuideAndVehicleForDateOfVisite
        public System.Data.Entity.DbSet<Citizen_TblCancelRequestedId> Citizen_TblCancelRequestedIds { get; set; } // Tbl_Cancel_requestedID
        public System.Data.Entity.DbSet<Citizen_TblDownloadTicket> Citizen_TblDownloadTickets { get; set; } // tbl_DownloadTickets
        public System.Data.Entity.DbSet<Citizen_TblPaymentByDepartmentalKioskUser> Citizen_TblPaymentByDepartmentalKioskUsers { get; set; } // tbl_PaymentByDepartmentalKioskUser
        public System.Data.Entity.DbSet<Citizen_TblPaymentByEmitraKioskUser> Citizen_TblPaymentByEmitraKioskUsers { get; set; } // tbl_PaymentByEmitraKioskUser
        public System.Data.Entity.DbSet<Citizen_TblSafariBooking> Citizen_TblSafariBookings { get; set; } // tbl_SafariBooking
        public System.Data.Entity.DbSet<Citizen_TblTicketBooking> Citizen_TblTicketBookings { get; set; } // tbl_TicketBooking
        public System.Data.Entity.DbSet<Citizen_TblTicketBookingInventory> Citizen_TblTicketBookingInventories { get; set; } // tbl_TicketBooking_Inventory
        public System.Data.Entity.DbSet<Citizen_TblTicketBookingMember> Citizen_TblTicketBookingMembers { get; set; } // tbl_TicketBookingMembers
        public System.Data.Entity.DbSet<Citizen_TblWildLifeSafariBookingDetail> Citizen_TblWildLifeSafariBookingDetails { get; set; } // tbl_WildLifeSafariBookingDetails
        public System.Data.Entity.DbSet<Citizen_TblWildLifeTicketBookingMemberDetail> Citizen_TblWildLifeTicketBookingMemberDetails { get; set; } // tbl_WildLifeTicketBookingMemberDetails
        public System.Data.Entity.DbSet<Citizen_TblZooBooking> Citizen_TblZooBookings { get; set; } // tbl_ZooBooking
        public System.Data.Entity.DbSet<Citizen_TblZooBookingHeadDetail> Citizen_TblZooBookingHeadDetails { get; set; } // tbl_ZooBookingHeadDetails
        public System.Data.Entity.DbSet<Citizen_TblZooBookingHeadDetailsTemp> Citizen_TblZooBookingHeadDetailsTemps { get; set; } // tbl_ZooBookingHeadDetailsTEMP
        public System.Data.Entity.DbSet<Citizen_TblZooMemberDetail> Citizen_TblZooMemberDetails { get; set; } // tbl_ZooMemberDetails
        public System.Data.Entity.DbSet<Citizen_TblZooStudentDocument> Citizen_TblZooStudentDocuments { get; set; } // tbl_ZooStudentDocuments
        public System.Data.Entity.DbSet<Citizen_TblZooVehicleDetail> Citizen_TblZooVehicleDetails { get; set; } // tbl_ZooVehicleDetails
        public System.Data.Entity.DbSet<Citizen_ZooSeatInventoryOld> Citizen_ZooSeatInventoryOlds { get; set; } // ZooSeatInventory_OLD
        public System.Data.Entity.DbSet<CompanyRagistration> CompanyRagistrations { get; set; } // CompanyRagistration
        public System.Data.Entity.DbSet<GIS_TblMstFixedLandNocType> GIS_TblMstFixedLandNocTypes { get; set; } // tbl_mst_FixedLand_NOCTypes
        public System.Data.Entity.DbSet<GIS_TblMstFixedPermissionPlant> GIS_TblMstFixedPermissionPlants { get; set; } // tbl_Mst_FixedPermission_Plant
        public System.Data.Entity.DbSet<GIS_TblMstFixedPermissionPlantMapping> GIS_TblMstFixedPermissionPlantMappings { get; set; } // tbl_Mst_FixedPermission_PlantMapping
        public System.Data.Entity.DbSet<GIS_TblMstFixedPermissionType> GIS_TblMstFixedPermissionTypes { get; set; } // tbl_mst_FixedPermissionTypes
        public System.Data.Entity.DbSet<Master_TblMstAdminDivision> Master_TblMstAdminDivisions { get; set; } // tbl_mst_Admin_Division
        public System.Data.Entity.DbSet<Master_TblMstDistrict> Master_TblMstDistricts { get; set; } // tbl_mst_Districts
        public System.Data.Entity.DbSet<Master_TblMstEqptSanctuariesFee> Master_TblMstEqptSanctuariesFees { get; set; } // tbl_mst_Eqpt_SanctuariesFee
        public System.Data.Entity.DbSet<Master_TblMstModeOfBooking> Master_TblMstModeOfBookings { get; set; } // tbl_mst_ModeOfBooking
        public System.Data.Entity.DbSet<Master_TblMstPlace> Master_TblMstPlaces { get; set; } // tbl_mst_Places
        public System.Data.Entity.DbSet<Master_TblMstPlaceBookingDuration> Master_TblMstPlaceBookingDurations { get; set; } // tbl_mst_PlaceBookingDuration
        public System.Data.Entity.DbSet<Master_TblMstPlaceDisplay> Master_TblMstPlaceDisplays { get; set; } // tbl_Mst_PlaceDisplay
        public System.Data.Entity.DbSet<Master_TblMstRecordStatu> Master_TblMstRecordStatus { get; set; } // tbl_Mst_RecordStatus
        public System.Data.Entity.DbSet<Master_TblMstShiftType> Master_TblMstShiftTypes { get; set; } // tbl_Mst_ShiftType
        public System.Data.Entity.DbSet<Master_TblMstTicketingFee> Master_TblMstTicketingFees { get; set; } // tbl_mst_TicketingFees
        public System.Data.Entity.DbSet<Master_TblMstVehicleEquipment> Master_TblMstVehicleEquipments { get; set; } // tbl_mst_Vehicle_Equipment
        public System.Data.Entity.DbSet<Master_TblMstVehicleEquipmentFee> Master_TblMstVehicleEquipmentFees { get; set; } // tbl_mst_Vehicle_EquipmentFee
        public System.Data.Entity.DbSet<Master_TblMstWildLifeEqptFeeDetail> Master_TblMstWildLifeEqptFeeDetails { get; set; } // tbl_Mst_WildLifeEqptFeeDetails
        public System.Data.Entity.DbSet<Master_TblMstWildLifeHeadDetail> Master_TblMstWildLifeHeadDetails { get; set; } // tbl_Mst_WildLifeHeadDetails
        public System.Data.Entity.DbSet<Master_TblMstWildLifeHeadMaster> Master_TblMstWildLifeHeadMasters { get; set; } // tbl_Mst_WildLifeHeadMaster
        public System.Data.Entity.DbSet<Master_TblMstWildLifeTicketFeeDetail> Master_TblMstWildLifeTicketFeeDetails { get; set; } // tbl_Mst_WildLifeTicketFeeDetails
        public System.Data.Entity.DbSet<Master_TblMstZone> Master_TblMstZones { get; set; } // tbl_mst_Zone
        public System.Data.Entity.DbSet<Master_TblZooHeadMaster> Master_TblZooHeadMasters { get; set; } // tbl_ZooHeadMaster
        public System.Data.Entity.DbSet<Master_TblZooPlaceWiseHead> Master_TblZooPlaceWiseHeads { get; set; } // tbl_ZooPlaceWiseHead
        public System.Data.Entity.DbSet<Master_TblZooSeatInventory> Master_TblZooSeatInventories { get; set; } // tbl_ZooSeatInventory
        public System.Data.Entity.DbSet<Master_TblZooTicketHeaderFooter> Master_TblZooTicketHeaderFooters { get; set; } // tblZooTicketHeaderFooter
        public System.Data.Entity.DbSet<Master_TblZooVehicleEquipment> Master_TblZooVehicleEquipments { get; set; } // tbl_Zoo_VehicleEquipment
        public System.Data.Entity.DbSet<Master_TblZooVehicleFee> Master_TblZooVehicleFees { get; set; } // tbl_ZooVehicleFees
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        public System.Data.Entity.DbSet<TblMstDistrict> TblMstDistricts { get; set; } // tbl_mst_Districts
        public System.Data.Entity.DbSet<TblMstPlace> TblMstPlaces { get; set; } // tbl_mst_Places
        public System.Data.Entity.DbSet<TblUserProfile> TblUserProfiles { get; set; } // tbl_UserProfiles
        public System.Data.Entity.DbSet<Token> Tokens { get; set; } // Tokens
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<ZooSeatInventoryOld> ZooSeatInventoryOlds { get; set; } // ZooSeatInventory_OLD

        static db_FMDSS()
        {
            System.Data.Entity.Database.SetInitializer<db_FMDSS>(null);
        }

        public db_FMDSS()
            : base("Name=db_FMDSS")
        {
        }

        public db_FMDSS(string connectionString)
            : base(connectionString)
        {
        }

        public db_FMDSS(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public db_FMDSS(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public db_FMDSS(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AspNetRoleConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblAssignGuideAndVehicleForDateOfVisiteConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblCancelRequestedIdConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblDownloadTicketConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblPaymentByDepartmentalKioskUserConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblPaymentByEmitraKioskUserConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblSafariBookingConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingInventoryConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingMemberConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblWildLifeSafariBookingDetailConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblWildLifeTicketBookingMemberDetailConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingHeadDetailConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingHeadDetailsTempConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooMemberDetailConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooStudentDocumentConfiguration());
            modelBuilder.Configurations.Add(new Citizen_TblZooVehicleDetailConfiguration());
            modelBuilder.Configurations.Add(new Citizen_ZooSeatInventoryOldConfiguration());
            modelBuilder.Configurations.Add(new CompanyRagistrationConfiguration());
            modelBuilder.Configurations.Add(new GIS_TblMstFixedLandNocTypeConfiguration());
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionPlantConfiguration());
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionPlantMappingConfiguration());
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionTypeConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstAdminDivisionConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstDistrictConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstEqptSanctuariesFeeConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstModeOfBookingConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstPlaceConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstPlaceBookingDurationConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstPlaceDisplayConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstRecordStatuConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstShiftTypeConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstTicketingFeeConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstVehicleEquipmentConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstVehicleEquipmentFeeConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeEqptFeeDetailConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeHeadDetailConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeHeadMasterConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeTicketFeeDetailConfiguration());
            modelBuilder.Configurations.Add(new Master_TblMstZoneConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooHeadMasterConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooPlaceWiseHeadConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooSeatInventoryConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooTicketHeaderFooterConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooVehicleEquipmentConfiguration());
            modelBuilder.Configurations.Add(new Master_TblZooVehicleFeeConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new TblMstDistrictConfiguration());
            modelBuilder.Configurations.Add(new TblMstPlaceConfiguration());
            modelBuilder.Configurations.Add(new TblUserProfileConfiguration());
            modelBuilder.Configurations.Add(new TokenConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new ZooSeatInventoryOldConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AspNetRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblAssignGuideAndVehicleForDateOfVisiteConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblCancelRequestedIdConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblDownloadTicketConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblPaymentByDepartmentalKioskUserConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblPaymentByEmitraKioskUserConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblSafariBookingConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblTicketBookingMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblWildLifeSafariBookingDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblWildLifeTicketBookingMemberDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingHeadDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooBookingHeadDetailsTempConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooMemberDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooStudentDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_TblZooVehicleDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Citizen_ZooSeatInventoryOldConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyRagistrationConfiguration(schema));
            modelBuilder.Configurations.Add(new GIS_TblMstFixedLandNocTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionPlantConfiguration(schema));
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionPlantMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new GIS_TblMstFixedPermissionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstAdminDivisionConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstEqptSanctuariesFeeConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstModeOfBookingConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstPlaceConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstPlaceBookingDurationConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstPlaceDisplayConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstRecordStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstShiftTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstTicketingFeeConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstVehicleEquipmentConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstVehicleEquipmentFeeConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeEqptFeeDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeHeadDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeHeadMasterConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstWildLifeTicketFeeDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblMstZoneConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooHeadMasterConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooPlaceWiseHeadConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooSeatInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooTicketHeaderFooterConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooVehicleEquipmentConfiguration(schema));
            modelBuilder.Configurations.Add(new Master_TblZooVehicleFeeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new TblMstDistrictConfiguration(schema));
            modelBuilder.Configurations.Add(new TblMstPlaceConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUserProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new TokenConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new ZooSeatInventoryOldConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<AdminConfiguration_GetCompanyByUrlReturnModel> AdminConfiguration_GetCompanyByUrl(string url)
        {
            int procResult;
            return AdminConfiguration_GetCompanyByUrl(url, out procResult);
        }

        public System.Collections.Generic.List<AdminConfiguration_GetCompanyByUrlReturnModel> AdminConfiguration_GetCompanyByUrl(string url, out int procResult)
        {
            var urlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Url", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = url, Size = 100 };
            if (urlParam.Value == null)
                urlParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<AdminConfiguration_GetCompanyByUrlReturnModel>("EXEC @procResult = [AdminConfiguration].[GetCompanyByUrl] @Url", urlParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<AdminConfiguration_GetCompanyByUrlReturnModel>> AdminConfiguration_GetCompanyByUrlAsync(string url)
        {
            var urlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Url", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = url, Size = 100 };
            if (urlParam.Value == null)
                urlParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<AdminConfiguration_GetCompanyByUrlReturnModel>("EXEC [AdminConfiguration].[GetCompanyByUrl] @Url", urlParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<Master_SpUpdateDistrictsReturnModel> Master_SpUpdateDistricts(string action, long? rowid, bool? status)
        {
            int procResult;
            return Master_SpUpdateDistricts(action, rowid, status, out procResult);
        }

        public System.Collections.Generic.List<Master_SpUpdateDistrictsReturnModel> Master_SpUpdateDistricts(string action, long? rowid, bool? status, out int procResult)
        {
            var actionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Action", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = action, Size = 100 };
            if (actionParam.Value == null)
                actionParam.Value = System.DBNull.Value;

            var rowidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ROWID", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = rowid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!rowid.HasValue)
                rowidParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@STATUS", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault() };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<Master_SpUpdateDistrictsReturnModel>("EXEC @procResult = [Master].[Sp_UPDATE_Districts] @Action, @ROWID, @STATUS", actionParam, rowidParam, statusParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Master_SpUpdateDistrictsReturnModel>> Master_SpUpdateDistrictsAsync(string action, long? rowid, bool? status)
        {
            var actionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Action", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = action, Size = 100 };
            if (actionParam.Value == null)
                actionParam.Value = System.DBNull.Value;

            var rowidParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ROWID", SqlDbType = System.Data.SqlDbType.BigInt, Direction = System.Data.ParameterDirection.Input, Value = rowid.GetValueOrDefault(), Precision = 19, Scale = 0 };
            if (!rowid.HasValue)
                rowidParam.Value = System.DBNull.Value;

            var statusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@STATUS", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = status.GetValueOrDefault() };
            if (!status.HasValue)
                statusParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<Master_SpUpdateDistrictsReturnModel>("EXEC [Master].[Sp_UPDATE_Districts] @Action, @ROWID, @STATUS", actionParam, rowidParam, statusParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
